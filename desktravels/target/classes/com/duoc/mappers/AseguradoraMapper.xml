<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.duoc.mappers.AseguradoraMapper">
    <resultMap id="BaseResultMap" type="com.duoc.domain.Aseguradora">
        <id column="IDASEGURADORA" jdbcType="DECIMAL" property="idaseguradora" />
        <result column="NOMBRE" jdbcType="VARCHAR" property="nombre" />
        <result column="DIRECCION" jdbcType="VARCHAR" property="direccion" />
        <result column="TELEFONO" jdbcType="DECIMAL" property="telefono" />
        <result column="EMAIL" jdbcType="VARCHAR" property="email" />
        <result column="NOMBRECONTACTO" jdbcType="VARCHAR" property="nombrecontacto" />
        <result column="RUT" jdbcType="VARCHAR" property="rut" />
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        IDASEGURADORA, NOMBRE, DIRECCION, TELEFONO, EMAIL, NOMBRECONTACTO, RUT
    </sql>
    <select id="selectByExample" parameterType="com.duoc.domain.AseguradoraCriteria" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from ASEGURADORA
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="com.duoc.domain.AseguradoraKey" resultMap="BaseResultMap">
        select 
        <include refid="Base_Column_List" />
        from ASEGURADORA
        where IDASEGURADORA = #{idaseguradora,jdbcType=DECIMAL}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="com.duoc.domain.AseguradoraKey">
        delete from ASEGURADORA
        where IDASEGURADORA = #{idaseguradora,jdbcType=DECIMAL}
    </delete>
    <delete id="deleteByExample" parameterType="com.duoc.domain.AseguradoraCriteria">
        delete from ASEGURADORA
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insert" parameterType="com.duoc.domain.Aseguradora">
        insert into ASEGURADORA (IDASEGURADORA, NOMBRE, DIRECCION, 
        TELEFONO, EMAIL, NOMBRECONTACTO, 
        RUT)
        values (#{idaseguradora,jdbcType=DECIMAL}, #{nombre,jdbcType=VARCHAR}, #{direccion,jdbcType=VARCHAR}, 
        #{telefono,jdbcType=DECIMAL}, #{email,jdbcType=VARCHAR}, #{nombrecontacto,jdbcType=VARCHAR}, 
        #{rut,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.duoc.domain.Aseguradora">
        insert into ASEGURADORA
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="idaseguradora != null">
                IDASEGURADORA,
            </if>
            <if test="nombre != null">
                NOMBRE,
            </if>
            <if test="direccion != null">
                DIRECCION,
            </if>
            <if test="telefono != null">
                TELEFONO,
            </if>
            <if test="email != null">
                EMAIL,
            </if>
            <if test="nombrecontacto != null">
                NOMBRECONTACTO,
            </if>
            <if test="rut != null">
                RUT,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="idaseguradora != null">
                #{idaseguradora,jdbcType=DECIMAL},
            </if>
            <if test="nombre != null">
                #{nombre,jdbcType=VARCHAR},
            </if>
            <if test="direccion != null">
                #{direccion,jdbcType=VARCHAR},
            </if>
            <if test="telefono != null">
                #{telefono,jdbcType=DECIMAL},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="nombrecontacto != null">
                #{nombrecontacto,jdbcType=VARCHAR},
            </if>
            <if test="rut != null">
                #{rut,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.duoc.domain.AseguradoraCriteria" resultType="java.lang.Long">
        select count(*) from ASEGURADORA
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update ASEGURADORA
        <set>
            <if test="record.idaseguradora != null">
                IDASEGURADORA = #{record.idaseguradora,jdbcType=DECIMAL},
            </if>
            <if test="record.nombre != null">
                NOMBRE = #{record.nombre,jdbcType=VARCHAR},
            </if>
            <if test="record.direccion != null">
                DIRECCION = #{record.direccion,jdbcType=VARCHAR},
            </if>
            <if test="record.telefono != null">
                TELEFONO = #{record.telefono,jdbcType=DECIMAL},
            </if>
            <if test="record.email != null">
                EMAIL = #{record.email,jdbcType=VARCHAR},
            </if>
            <if test="record.nombrecontacto != null">
                NOMBRECONTACTO = #{record.nombrecontacto,jdbcType=VARCHAR},
            </if>
            <if test="record.rut != null">
                RUT = #{record.rut,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update ASEGURADORA
        set IDASEGURADORA = #{record.idaseguradora,jdbcType=DECIMAL},
        NOMBRE = #{record.nombre,jdbcType=VARCHAR},
        DIRECCION = #{record.direccion,jdbcType=VARCHAR},
        TELEFONO = #{record.telefono,jdbcType=DECIMAL},
        EMAIL = #{record.email,jdbcType=VARCHAR},
        NOMBRECONTACTO = #{record.nombrecontacto,jdbcType=VARCHAR},
        RUT = #{record.rut,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.duoc.domain.Aseguradora">
        update ASEGURADORA
        <set>
            <if test="nombre != null">
                NOMBRE = #{nombre,jdbcType=VARCHAR},
            </if>
            <if test="direccion != null">
                DIRECCION = #{direccion,jdbcType=VARCHAR},
            </if>
            <if test="telefono != null">
                TELEFONO = #{telefono,jdbcType=DECIMAL},
            </if>
            <if test="email != null">
                EMAIL = #{email,jdbcType=VARCHAR},
            </if>
            <if test="nombrecontacto != null">
                NOMBRECONTACTO = #{nombrecontacto,jdbcType=VARCHAR},
            </if>
            <if test="rut != null">
                RUT = #{rut,jdbcType=VARCHAR},
            </if>
        </set>
        where IDASEGURADORA = #{idaseguradora,jdbcType=DECIMAL}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.duoc.domain.Aseguradora">
        update ASEGURADORA
        set NOMBRE = #{nombre,jdbcType=VARCHAR},
        DIRECCION = #{direccion,jdbcType=VARCHAR},
        TELEFONO = #{telefono,jdbcType=DECIMAL},
        EMAIL = #{email,jdbcType=VARCHAR},
        NOMBRECONTACTO = #{nombrecontacto,jdbcType=VARCHAR},
        RUT = #{rut,jdbcType=VARCHAR}
        where IDASEGURADORA = #{idaseguradora,jdbcType=DECIMAL}
    </update>
</mapper>